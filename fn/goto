function fn.goto(x,y,z,dir)
 x,y,z,dir=tonumber(x),tonumber(y),tonumber(z),fn.todir(dir)
 print("goto "..x.." "..y.." "..z.." "..dirs[dir])
 local i,c,tmp=0,0,false
 
 turtle.select(1)
 while pos.x~=x or pos.y~=y or pos.z~=z do
  fn.refuel(fn.distanct(x,y,z))
  tmp=dropWay
  dropWay=false
  fn.move(pos.y-y, nil, fn.tryDown)
  fn.move(y-pos.y, nil, fn.tryUp)
  dropWay=tmp
  fn.move(pos.z-z, 'N') 
  fn.move(x-pos.x, 'E')
  fn.move(z-pos.z, 'S')
  fn.move(pos.x-x, 'W')
 end
 fn.turn(dir)
end

function fn.distanct(x,y,z)
  return math.abs(pos.x-x)+math.abs(pos.y-y)+math.abs(pos.z-z)
end

function fn.go(x,y,z,dir)
 x=tonumber(x)+pos.x
 y=tonumber(y)+pos.y
 z=tonumber(z)+pos.z
 fn.goto(x,y,z,dir)
end

function fn.digWay(val)
 local c=0
 if val ~= nil then
  if val=='true' then digWay=true end
  if val=='false' then digWay=false end
  return
 end
 if not digWay then return end

 fn.digUp()
 if not turtle.detectDown() and dropWay then
  for i=2,16 do 
   c=turtle.getItemCount(i)
   if i==2 then c=c-1 end
   if c>0 then
    turtle.select(i)
    if turtle.placeDown() then break end
   end
  end
 end
 turtle.select(1)
end

function fn.move(count, dir, act)
 local i,c=0,0
 count=tonumber(count)
 if act==nil then act=fn.tryForward end
 if count>0 then
  fn.turn(dir)
  while count>0 do
   if act() then count=count-1 end
   fn.digWay()
  end
 end
end