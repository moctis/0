function fn.digPlusRun()
 fn.digPlusHome()

 local i=0 
 pos.ox,pos.oy,pos.oz,pos.odir=pos.x,pos.y,pos.z,pos.dir  
 fn.refuel(pos.y*2)
 turtle.select(1)
 while pos.y > 4 do
  if not fn.tryDown() then break end
  fn.digX()
 end

 while pos.y ~= pos.oy-1 do
  fn.tryUp()
 end

 fn.selectAdv(conf.placeSlot, 5)
 for i=1,4 do  
  turtle.place()
  fn.left()
 end
 fn.tryUp()
 turtle.placeDown() 
end

function fn.digX()
  for i=1,4 do
   fn.tryDig(5)
   if fn.isFull() then
	fn.unloadAndReturn()
   end
   fn.left()
  end   
end



function fn.unloadAndReturn()
 fn.job("jobUnload", home.x, home.y, home.z)
 fn.gotoHome()
 

 while not turtle.detectUp() and fn.isFull() do 
   status("wait unload "..os.time())
   sleep(1)
 end

 if turtle.detectUp() and fn.isFull() then
   fn.digPlusDrop(2, fn.safeDropUp)	   
 end
 
 while fn.down() do end
end

function fn.safeDropUp()
  if turtle.detectUp() then
    return turtle.dropUp()
  end
  return false
end

function fn.digPlus()
 fn.digPlusHome()
 fn.digPlusRun()
 fn.digPlusNext()
end

function fn.digPlusLoop()
 while true do
   fn.digPlusRun()
   fn.digPlusNext()

   local x,y,z,dir=pos.x,pos.y,pos.z,''
   x,z=math.floor((x-1)/5),math.floor((z-1)/5)
 
   z=fn.mod(z,8)
   x=fn.mod(x,8)
   if z==0 and x==0 then
     break
   end
 end

end

function fn.digPlusBase()
 local x,y,z=pos.x,pos.y,pos.z
 x=x-fn.mod(x-1,5)+2
 y=base.y-2
 fn.goto(x,y,z,'N')
end

function fn.mod(x,d)
 return x % d
end

function fn.digPlusHome()
 local dx={[0]=1,[1]=4,[2]=2,[3]=0,[4]=3}
 local x,y,z=pos.x,pos.y,pos.z
 x=x-fn.mod(x-1,5)
 x=x+dx[fn.mod(z-1,5)]
 y=base.y-2
 status(x,' ',y,' ',z,' E')
 fn.goto(x,y,z,'E')
 fn.saveHome()
end

function fn.digPlusNext()
 fn.digPlusHome()
 local x,y,z,dir=pos.x,pos.y,pos.z,''
 x,z=math.floor((x-1)/5),math.floor((z-1)/5)
 
 z=fn.mod(z,2)
 x=fn.mod(x,8)
 if z==0 then 
	dir='E' 
	if x==3 then dir='S' end
 else 
	dir='W' 
	if x==0 then dir='S' end
 end
 fn.move(dir,5)
end

function fn.digPlusDropAll()
 return fn.digPlusDrop(1)
end

function fn.digPlusDrop(start,act)
 local i,c,count
 if act==nil then act=turtle.drop end
 if start==nil then start=2 end
 i,c = 1,0
 while true do
  status('drop remain #',i,' try ',c)
  turtle.select(i)
  count=turtle.getItemCount(i)
  if i==1 then 
    count=count-conf.keepFuel
  elseif i==start then count=count-1 
  elseif i<start then
    count=0
  end
  
  if count>0 then
   act(count)
   c=0
  end

  i = i+1
  if i>16 then 
    i,c = 1,c+1
    if c>10 then 
      status('digPlusDrop done')
      return 
    end
  end
 end
end
