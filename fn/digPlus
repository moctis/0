function fn.digPlusRun()
 fn.digPlusHome()

 local i=0 
 pos.ox,pos.oy,pos.oz,pos.odir=pos.x,pos.y,pos.z,pos.dir  
 fn.refuel(pos.y*2)
 turtle.select(1)
 while pos.y > 4 do
  if not fn.tryDown() then break end
  fn.digX()
 end

 while pos.y ~= pos.oy-1 do
  fn.tryUp()
 end

 fn.selectAdv(conf.placeSlot, 5)
 for i=1,4 do  
  turtle.place()
  fn.left()
 end
 fn.tryUp()
 turtle.placeDown() 
end


function fn.digX()
  for i=1,4 do
   fn.tryDig(5)
   if fn.isFull() then
	fn.digPlusUnload()
	while fn.down() do end
   end
   fn.left()
  end   
end

function fn.digPlusUnload()
 fn.loadHome()
 print_("jobUnload", home.x, home.y, home.z)
 fn.job("jobUnload", home.x, home.y, home.z)
 fn.gotoHome()

 local try=0
 while true do
   if turtle.detectUp() then break end
   if try>30 then
     if fn.isFull() then try=0 else break end
   end
   status("wait unload "..try.."/30")
   sleep(1) 
   try=try+1
 end

 if turtle.detectUp() then
   fn.digPlusDrop(2, fn.safeDropUp, 2)
 end

end

function fn.digPlus()
 fn.digPlusHome()
 fn.digPlusRun()
 fn.digPlusNext()
end

function fn.digPlusLoop()
 while true do
   fn.digPlusHome()
   fn.digPlusRun()
   fn.digPlusNext()

   local x,y,z,dir=pos.x,pos.y,pos.z,''
   x,z=math.floor((x-1)/5),math.floor((z-1)/5)
 
   z=fn.mod(z,conf.gridZ)
   x=fn.mod(x,conf.gridX)
   if z==0 and x==0 then
     break
   end
 end

end

function fn.digPlusBase()
 local x,y,z=pos.x,pos.y,pos.z
 x=x-fn.mod(x-1,5)+2
 y=base.y-2
 fn.goto(x,y,z,'N')
end

function fn.mod(x,d)
 return x % d
end


function fn.digPlusHome()
 local dx={[0]=1,[1]=4,[2]=2,[3]=0,[4]=3}
 local x,y,z=pos.x,pos.y,pos.z
 x=x-fn.mod(x-1,5)
 x=x+dx[fn.mod(z-1,5)]
 y=base.y-2
 status(x,' ',y,' ',z,' E')
 fn.goto(x,y,z,'E')
 fn.saveHome()
end

function fn.digPlusNext()
 fn.digPlusHome()
 local x,y,z,dir=pos.x,pos.y,pos.z,''
 local ix,iz=math.floor((x-base.x-1)/5),math.floor((z-base.z-1)/5)  
 local gx,gz=fn.mod(ix,conf.gridX),fn.mod(iz,conf.gridZ)
 local px,pz=fn.mod(x-1,5),fn.mod(z-1,5)
 local nx,nz = 9-px-pz, 10-pz*2
 local turn = false
 print_("base ",base.x,base.z)
 print_("x",x,"z",z)
 print_("ix",ix,"iz",iz)
 print_("gx",gx,"gz",gz)
 print_("px",px,"pz",pz)
 print_("nx",nx,"nz",nz)

 if fn.mod(iz,2)==0 then 
	if ix==conf.gridX-1 then
		print_('move','E', nx)
		print_('move','S', nz)
		print_('move','W', nx)
		fn.move('S',5)
	else
		print_('move','E',5)
		fn.move('E',5)
	end
 else 
	if ix==0 then 
		print_('move','W',5)
		fn.move('W',5)
	else
		fn.move('S',5)
		print_('move','W', nx)
		print_('move','S', nz)
		print_('move','E', nx)
	end
 end

 fn.digPlusHome()
end

function fn.digPlusDropAll()
 return fn.digPlusDrop(1)
end

function fn.digPlusDrop(start,act,try)
 local i,c,count
 try = fn.tonumber(try,10)
 start = fn.tonumber(start,2)
 if act==nil then act=turtle.drop end
 i,c = 1,0
 while true do
  status('drop remain #',i,' try ',c,'/',try)
  turtle.select(i)
  count=turtle.getItemCount(i)
  if i==1 then 
    count=count-conf.keepFuel
  elseif i==start then count=count-1 
  elseif i<start then
    count=0
  end
  
  if count>0 then
   --print_("drop ",i," / ",count)
   if act(count) then c=0 end
  end

  i = i+1
  if i>16 then 
    i,c = 1,c+1
    if c>try then 
      status('digPlusDrop done')
      return 
    end
  end
 end
end

