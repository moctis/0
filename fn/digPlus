function fn.digPlusRun()
 fn.digPlusHome()

 local i=0 
 pos.ox,pos.oy,pos.oz,pos.odir=pos.x,pos.y,pos.z,pos.dir  
 fn.refuel(pos.y*2)
 turtle.select(1)
 while pos.y > 4 do
  if not fn.tryDown() then break end
  fn.digX()
 end

 while pos.y ~= pos.oy-1 do
  fn.tryUp()
 end

 fn.calcPos()
 if conf.dropWay then
   fn.selectAdv(conf.placeSlot, 5)
   for i=1,4 do  
    turtle.place()
    fn.left()
   end
   fn.tryUp()
   turtle.placeDown() 
 else
   fn.tryUp()
 end
end


function fn.digX()
  for i=1,4 do
   if fn.isFull() then
	fn.digPlusUnload()
	while fn.down() do end
   end
   fn.tryDig(5)
   fn.left()
  end   
end

function fn.digPlusUnload()
 fn.loadHome()
 print_("jobUnload", home.x, home.y, home.z)
 fn.job("jobUnload", home.x, home.y, home.z)
 fn.gotoHome()

 local try=0
 while true do
   if turtle.detectUp() then break end
   if try>30 then
     if fn.isFull() then try=0 else break end
   end
   status("wait unload "..try.."/30")
   sleep(1) 
   try=try+1
 end

 if turtle.detectUp() then
   fn.digPlusDrop(2, fn.safeDropUp, 2)
   fn.tryDown()
   fn.tryUp()
 end
 
end

function fn.digPlus()
 fn.digPlusHome()
 fn.digPlusRun()
 fn.digPlusNext()
 fn.digPlusHome()
 fn.digPlusDone()
end


function fn.digPlusDone()
  fn.send(base.id,"DONE")
end
function fn.digPlusLoop()
 while true do
   fn.digPlusHome()
   fn.digPlusRun()
   fn.digPlusNext()
 end

end

function fn.digPlusBase()
 fn.calcPos()
 local x,y,z,dir=pos.x,conf.basey,pos.z,'N'
 x = x - pos.px + 2
 if pos.pz < 2 then dir='S' end
 fn.goto(x,y,z, dir)
end

function fn.mod(x,d)
 return x % d
end


function fn.digPlusHome()
 local dx={[0]=1,[1]=4,[2]=2,[3]=0,[4]=3}
 local x,y,z,dir=0,0,0,''
 fn.calcPos()

 x = pos.x + dx[pos.pz] - pos.px
 y = conf.basey
 z = pos.z
 dir = fn.nextDir(pos.ix,pos.iz)

 conf.dropWay = false
 if (pos.pz==0) then conf.dropWay=true end
 if (pos.pz==4) then conf.dropWay=true end
 fn.goto(x,y,z,dir)
 fn.saveHome()
end

function fn.printNext()
 local x,y
 local t
 for y=-5,5 do
   t=""
   for x=-5,5 do
     t=t..fn.nextDir(x,y)
   end
   print(t)
 end
end


function fn.testNext()
  local h,k,dir = pos.x,pos.z,''
  for i=1,30 do
    turtle.placeDown()
    dir=fn.nextDir(pos.x-h,pos.z-k)
    fn.move(dir,1)
  end
end

--[[
        |
  E E E E E E S
  N E E E E S S
  N N E E S S S
--N N N S S S S--
  N N N W S S S
  N N W W W S S
  N W W W W W S
        |
]]
function fn.nextDir(ix,iz)
 local dir=" "
 if ix>=-iz and ix>=iz then return 'S' 
 elseif ix<iz and ix>-iz then return 'W'
 elseif ix<=-iz and ix<iz then return 'N'
 else return 'E'
 end
end

function fn.digPlusNext()
 fn.digPlusHome()
 fn.calcPos()
 local dir = fn.nextDir(pos.ix,pos.iz)
 fn.move(dir, 5)
 fn.digPlusHome() 
end

function fn.digPlusDropAll()
 return fn.digPlusDrop(1)
end

function fn.digPlusDrop(start,act,try)
 local i,c,count
 try = fn.tonumber(try,10)
 start = fn.tonumber(start,2)
 if act==nil then act=turtle.drop end
 i,c = 1,0
 while true do
  status('drop remain #',i,' try ',c,'/',try)
  turtle.select(i)
  count=turtle.getItemCount(i)
  if i==1 then 
    count=count-conf.keepFuel
  elseif i==start then count = count - conf.keepPlace 
  elseif i<start then
    count=0
  end
  
  if count>0 then
   --print_("drop ",i," / ",count)
   if act(count) then c=0 end
  end

  i = i+1
  if i>16 then 
    i,c = 1,c+1
    if c>try then 
      status('digPlusDrop done')
      turtle.select(1)
      return 
    end
  end
 end
end

