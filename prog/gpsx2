function gpsx(cmd,x,y,z)
	local loc,baseid=nil,0
	if cmd=="base" then
		while x==nill or y==nil or z==nil do
		      x,y,z = gps.locate(2)
		end
		pos.x,pos.y,pos.z,pos.dir = tonumber(x),tonumber(y),tonumber(z),0
	elseif cmd=="setup" then
		pos.x,pos.y,pos.z,pos.dir = tonumber(x),tonumber(y),tonumber(z),0
		fn.turn('N')
		for baseid=0,3 do
			print("setup "..dirs[pos.dir])
			fn.tryDig()
			turtle.select(5+baseid)
			if turtle.place() then 
				sleep(0.5)
				fn.dropFuel()
				local m=peripheral.wrap("front")
				m.turnOn()				
			end
			fn.right()
		end
		os.setComputerLabel("gpsx base "..x.." "..y.." ".. z)
		term.clear()
		os.reboot()
		return
	elseif cmd=="del" then
		rednet.broadcast("DEL")
		print("press ENTER to collect drone")
		read()
		fn.turn('N')
		for baseid=0,3 do
			turtle.select(1)
			turtle.suck() 
			turtle.select(9)
			while turtle.suck() do sleep(0.5) end
			turtle.select(5+baseid)
			fn.dig()
			fn.right()
		end
		return
	elseif cmd=="N" or cmd=="E" or cmd=="S" or cmd=="W" then
		local m,d = nil,0
		while m==nill do
			status('locate base '..os.time())
			rednet.broadcast("BASE")
			baseid,m,d=rednet.receive(2) 
			if m~= nil then
				loc=textutils.unserialize(m)
				if loc == nil then m=nil 
				elseif loc[4] ~= "base" then m=nil end
			end
			if m==nil then sleep(1) end			 
		end
		if d < 3 then			
			pos.x,pos.y,pos.z=xyz(nil,cmd)
			pos.dir=fn.todir(cmd)
			x,y,z=xyz(cmd)
			fn.refuel(30)
			fn.goto(x,y,z,cmd)
		end
		x,y,z=xyz(cmd)
		pos.x,pos.y,pos.z,pos.dir=loc[1]+x,loc[2]+y,loc[3]+z,fn.todir(cmd)
	end
	
	print("POS ", pos.x,' ',pos.y,' ',pos.z)
	print( "Serving GPS requests")

	local nServed = 0
	while true do
		sender,message,distance = rednet.receive()
		if (message == "PING") or (message=="BASE") then
			if cmd=="base" then
				rednet.send(sender, textutils.serialize({pos.x,pos.y,pos.z,cmd}))
			else
				rednet.send(sender, textutils.serialize({pos.x,pos.y,pos.z}))
			end
			
			nServed = nServed + 1
			if nServed > 1 then
				local x,y = term.getCursorPos()
				term.setCursorPos(1,y-1)
			end
			print( nServed.." GPS Requests served" )
		elseif message=="DEL" and loc~=nil then
			x,y,z=xyz(nil,cmd)
			fn.refuel(30)
			fn.goto(loc[1]+x,loc[2]+y,loc[3]+z,cmd) 
			return
		end
	end
end

function xyz(n,d)
 if d=='N' then return 0,0,-1 end
 if d=='E' then return 1,0,0 end
 if d=='S' then return 0,0,1 end
 if d=='W' then return -1,0,0 end

--[[ if n=='N' then return 2,2,-3 end
 if n=='E' then return 2,3,3 end
 if n=='S' then return -2,4,5 end
 if n=='W' then return -7,2,-2 end
]]

 if n=='N' then return 2,5,-6 end
 if n=='E' then return 8,3,3 end
 if n=='S' then return -2,7,9 end
 if n=='W' then return -7,2,-2 end
end

function gpsx_host()
end

for _,s in pairs(redstone.getSides()) do rednet.open(s) end
gpsx(...)