
function gpsx(cmd,x,y,z)
	local loc,baseid=nil,0
	local gx,gy,gz,dir
	if cmd=="base" then
		while x==nill or y==nil or z==nil do
		      x,y,z = gps.locate(2)
		end
		pos.x,pos.y,pos.z,pos.dir,pos.valid = tonumber(x),tonumber(y),tonumber(z),0,true
	elseif cmd=="setup" then
		if x == nil then
			x,y,z=pos.x,pos.y,pos.z
		end
		x,y,z,dir = tonumber(x),tonumber(y),tonumber(z),0
		pos.x,pos.y,pos.z,pos.dir,pos.valid = 0,0,0,0,false
		dropWay=false
		for dir=0,3 do
			print("setup "..dirs[dir])
			gx,gy,gz=xyz(dirs[dir])
			gy=gy-1
			fn.goto(gx,gy,gz,dir)
			fn.tryDigUp()
			turtle.select(5+dir)
			if turtle.placeUp() then 
				sleep(0.5)
				fn.dropFuelUp()
				local m=peripheral.wrap("top")
				if m then m.turnOn() end
			end
			gx,gy,gz=xyz(nil, dirs[dir])
			fn.goto(gx,gy,gz,dir)
		end
		fn.goto(0,0,0,0)
		os.setComputerLabel("gpsx base "..x.." "..y.." ".. z)
		term.clear()
		os.reboot()
		return
	elseif cmd=="del" then
		rednet.broadcast("DEL")
		print("press ENTER to collect drone")
		read()
		fn.turn('N')
		for dir=0,3 do
			turtle.select(1)
			turtle.suck() 
			turtle.select(9)
			while turtle.suck() do sleep(0.5) end
			turtle.select(dir)
			turtle.dropUp()
			fn.dig()
			fn.right()
		end
		return
	elseif cmd=="N" or cmd=="E" or cmd=="S" or cmd=="W" then
		fn.getBase()
		x,y,z=xyz(cmd)
		pos.x,pos.y,pos.z,pos.dir,pos.valid=base.x+x,base.y+y,base.z+z,fn.todir(cmd),true
	else
		print("invalid command")
		return
	end
	
	parallel.waitForAny(
		function() 
			gpsxServe(cmd, loc)
		end,
		function()
			fn.jobCommander()
		end
	)
	
end



function gpsxServe(cmd)
	local x,y,z,t 
	term.clear()
	term.setCursorPos(20,1)
	print("[Serving GPS]")
	print("POS ", pos.x,' ',pos.y,' ',pos.z)

	local nServed = 0
	while true do
		local sender,message,distance = rednet.receive(2) 
		if (message == "PING") or (message=="BASE") then
			--print("pos.valid '",pos.valid, "', cmd '",cmd,"'")
			--print(" msg '",message,"'"," sender ",sender)
			if pos.valid then
			if cmd=="base" and message=="BASE" then
			        t={pos.x,pos.y,pos.z,cmd}
			        t=textutils.serialize(t)
				--print('a',t)
				rednet.send(sender, t)
			elseif message=="PING" then
				t={pos.x,pos.y,pos.z}
				t=textutils.serialize(t)
				--print('b',t)
				rednet.send(sender, t)
			end
			end
			
			nServed = nServed + 1
			x,y = term.getCursorPos()
			term.setCursorPos(20,1)
			print("[GPS Requests " ..nServed.."]")
			term.setCursorPos(x,y)
		elseif message=="DEL" then
			x,y,z=xyz(nil,cmd)
			fn.refuel(30)
			fn.goto(base.x+x,base.y+y,base.z+z,cmd) 
			return
		elseif cmd=="base" and message ~= nil then
			local arg=fn.split(message)
			if arg[1]=="ENQ" then
				fn.queueJob(sender, unpack(arg,2))
			elseif arg[1]=="DEQ" then
				fn.dequeueJob(sender, unpack(arg,2))
			end
		end
	end
end

function xyz(n,d)
 if d=='N' then return 0,0,-1 end
 if d=='E' then return 1,0,0 end
 if d=='S' then return 0,0,1 end
 if d=='W' then return -1,0,0 end

--[[ if n=='N' then return 2,2,-3 end
 if n=='E' then return 2,3,3 end
 if n=='S' then return -2,4,5 end
 if n=='W' then return -7,2,-2 end
]]

 if n=='N' then return 2,5,-6 end
 if n=='E' then return 8,3,3 end
 if n=='S' then return -2,7,9 end
 if n=='W' then return -7,2,-2 end
end

function gpsx_host()
end

for _,s in pairs(redstone.getSides()) do rednet.open(s) end
gpsx(...)